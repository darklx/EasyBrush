<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Y.Utils</name>
    </assembly>
    <members>
        <member name="M:Y.Utils.AppUtils.AppUnique.IsUnique(System.String)">
            <summary>
            判断应用在当前系统实例下是否唯一
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.AppUtils.PermissionTool.IsAdministrator">
            <summary>
            当前登录用户是否为管理员
            百万次执行时间：26947、28705、28244 ms
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.AppUtils.PermissionTool.IsAdmin">
            <summary>
            当前登录用户是否为管理员
            百万次执行时间：8063、9097、9755 ms
            </summary>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.AppUtils.StartupTool">
            <summary>
            设为开机启动
            </summary>
        </member>
        <member name="T:Y.Utils.DataUtils.DateTimeUtils.WeekDayTool">
            <summary>
            日期转换周
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.DateTimeUtils.WeekDayTool.ToWeekDay(System.DateTime)">
            <summary>
            显示日期为周几
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.DataUtils.DateTimeUtils.DateTimeConvert">
            <summary>
            日期格式转换工具
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.DateTimeUtils.DateTimeConvert.StandardString(System.DateTime)">
            <summary>
            yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.DateTimeUtils.DateTimeConvert.CompactString(System.DateTime)">
            <summary>
            yyyyMMddHHmmss
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.DateTimeUtils.DateTimeConvert.DetailString(System.DateTime)">
            <summary>
            yyyy-MM-dd HH:mm:ss.fff
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.StringUtils.StringTool.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串为null或为空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.StringUtils.StringTool.Split(System.String,System.Char,System.String[]@)">
            <summary>
            分割字符串
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.StringUtils.StringTool.SubStringCount(System.String,System.String)">
            <summary>
            字符串中字符出现次数
            </summary>
            <param name="s"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.StringUtils.StringTool.IsMatch(System.String,System.String)">
            <summary>
            根据通配符验证字符串
            </summary>
            <param name="s">字符串</param>
            <param name="pattern">通配符：%和_</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.MD5Tool.Encrypt(System.String)">
            <summary>
            给一个字符串进行MD5加密
            </summary>
            <param name="s">待加密字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.AesTool.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="str">要加密的 string 字符串</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.AesTool.Encrypt(System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="array">要加密的 byte[] 数组</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.AesTool.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="str">要解密的 string 字符串</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.AesTool.Decrypt(System.Byte[],System.String)">
            <summary>
            解密
            </summary>
            <param name="array">要解密的 byte[] 数组</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.AesTool.FmtPassword(System.String)">
            <summary>
            格式化密码
            </summary>
            <param name="s">要格式化的密码</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.DesTool.Encrypt(System.String,System.String)">
            <summary>
            DESEnCode DES加密
            </summary>
            <param name="pToEncrypt"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.EncryptUtils.DesTool.Decrypt(System.String,System.String)">
            <summary>
            DESDeCode DES解密
            </summary>
            <param name="pToDecrypt"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.DataUtils.UnitConvertUtils.ByteConvertTool">
            <summary>
            计算机字节单位转换工具
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.UnitConvertUtils.ByteConvertTool.Fmt(System.Int64,System.Int32)">
            <summary>
            自动格式化字节单位
            </summary>
            <param name="size"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.UnitConvertUtils.ByteConvertTool.Fmt(System.Double,System.Int32)">
            <summary>
            自动格式化字节单位
            </summary>
            <param name="size"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.UnitConvertUtils.ByteConvertTool.Cvt(System.Int64,System.String,System.Int32)">
            <summary>
            根据单位换算
            </summary>
            <param name="size"></param>
            <param name="unit"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.UnitConvertUtils.ByteConvertTool.Cvt(System.Double,System.String,System.Int32)">
            <summary>
            根据单位换算
            </summary>
            <param name="size"></param>
            <param name="unit"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.DataUtils.Collections.ListTool">
            <summary>
            元素列表工具类
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.Collections.ListTool.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            列表为空（null 或 count 等于 0）
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">元素列表</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.DataUtils.Collections.ListTool.HasElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            列表至少有一个元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">元素列表</param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.DataUtils.EnumUtils.FlagsEnumTool">
            <summary>
            标志枚举修改工具
            弃用：效率太低
            sa = sa | StatusAttributes.Join;//添加属性
            sa = (sa | StatusAttributes.Share) ^ StatusAttributes.Share;//删除属性
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转换成Json 
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Object)">
            <summary> 
            对象转换为Json 
            </summary> 
            <param name="jsonObject">对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Collections.IEnumerable)">
            <summary> 
            对象集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToArrayString(System.Collections.IEnumerable)">
            <summary> 
            普通集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Data.DataSet)">
            <summary> 
            DataSet转换为Json 
            </summary> 
            <param name="dataSet">DataSet对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Data.DataTable)">
            <summary> 
            Datatable转换为Json 
            </summary> 
            <param name="table">Datatable对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为Json 
            </summary>
        </member>
        <member name="M:Y.Utils.DataUtils.JsonUtils.ConvertJson.ToJson(System.Data.Common.DbDataReader)">
            <summary> 
            DataReader转换为Json 
            </summary> 
            <param name="dataReader">DataReader对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="T:Y.Utils.DataUtils.CurrencyUtils.RMB">
            <summary> 
            RMB 的摘要说明。 
            </summary> 
        </member>
        <member name="M:Y.Utils.DataUtils.CurrencyUtils.RMB.CmycurD(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:Y.Utils.DataUtils.CurrencyUtils.RMB.CmycurD(System.String)">
            <summary> 
            一个重载，将字符串先转换成数字在调用CmycurD(decimal num) 
            </summary> 
            <param name="num">用户输入的金额，字符串形式未转成decimal</param> 
            <returns></returns> 
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.IconTool.Save(System.Drawing.Image,System.String)">
            <summary>
            将 Image 保存到指定目录文件名的 Icon
            </summary>
            <param name="image"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.IconTool.ConvertToIcon(System.Drawing.Image,System.Boolean)">
            <summary>
            转换Image为Icon
            </summary>
            <param name="image">要转换为图标的Image对象</param>
            <param name="nullTonull">当image为null时是否返回null。false则抛空引用异常</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y.Utils.IOUtils.ImageUtils.AffineTool.RotateImg(System.String,System.String,System.Int32)" -->
        <member name="M:Y.Utils.IOUtils.ImageUtils.ThunbnailTool.Normal(System.Drawing.Bitmap,System.Int32,System.Int32,System.String,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            标准缩略图生成
            </summary>
            <param name="originalImage">原始图像</param>
            <param name="width">指定宽度</param>
            <param name="height">指定高度</param>
            <param name="mode">缩略图模式</param>
            <param name="im">差值模式</param>
            <param name="sm">平滑模式</param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.IOUtils.ImageUtils.CaptchaHelper">
            <summary>
            Captcha
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.objRandom">
            <summary>
            随机种子
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.Length">
            <summary>
            验证码长度(默认为4)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.verifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.VerifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.addLowerLetter">
            <summary>
            是否加入小写字母
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.AddLowerLetter">
            <summary>
            是否加入小写字母(不包括o)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.addUpperLetter">
            <summary>
            是否加入大写字母
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.AddUpperLetter">
            <summary>
            是否加入大写字母(不包括O)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.fontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.FontSize">
            <summary>
            字体大小(默认为18)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.fontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.FontColor">
            <summary>
            字体颜色(默认为Blue)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.fontFamily">
            <summary>
            字体类型
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.FontFamily">
            <summary>
            字体类型(默认为Verdana)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.backgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.BackgroundColor">
            <summary>
            背景色(默认为AliceBlue)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.foreNoisePointCount">
            <summary>
            前景噪点数量
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.ForeNoisePointCount">
            <summary>
            前景噪点数量(默认为2)
            </summary>
        </member>
        <member name="F:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.randomAngle">
            <summary>
            随机码的旋转角度
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.RandomAngle">
            <summary>
            随机码的旋转角度(默认为40度)
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.GetText">
            <summary>
            得到验证码字符串
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.GetImage">
            <summary>
            得到验证码图片
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.AddForeNoisePoint(System.Drawing.Bitmap)">
            <summary>
            添加前景噪点
            </summary>
            <param name="objBitmap"></param>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.CaptchaHelper.AddBackgroundNoisePoint(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            添加背景噪点
            </summary>
            <param name="objBitmap"></param>
            <param name="objGraphics"></param>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> 
            生成缩略图 
            </summary> 
            <param name="originalImagePath">源图路径（物理路径）</param> 
            <param name="thumbnailPath">缩略图路径（物理路径）</param> 
            <param name="width">缩略图宽度</param> 
            <param name="height">缩略图高度</param> 
            <param name="mode">生成缩略图的方式</param>     
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y.Utils.IOUtils.ImageUtils.ImageHelper.RotateImg(System.String,System.String,System.Int32)" -->
        <member name="T:Y.Utils.IOUtils.ImageUtils.ScreenCapture">
            <summary>
            屏幕捕获类
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.ScreenCapture.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            把当前屏幕捕获到位图对象中
            </summary>
            <param name="hdcDest">目标设备的句柄</param>
            <param name="nXDest">目标对象的左上角的X坐标</param>
            <param name="nYDest">目标对象的左上角的X坐标</param>
            <param name="nWidth">目标对象的矩形的宽度</param>
            <param name="nHeight">目标对象的矩形的长度</param>
            <param name="hdcSrc">源设备的句柄</param>
            <param name="nXSrc">源对象的左上角的X坐标</param>
            <param name="nYSrc">源对象的左上角的X坐标</param>
            <param name="dwRop">光栅的操作值</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.ScreenCapture.Capture">
            <summary>
            屏幕捕获到位图对象中
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.ScreenCapture.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            压缩图片
            </summary>
            <param name="originalImage"></param>
        </member>
        <member name="M:Y.Utils.IOUtils.ImageUtils.ScreenCapture.DrawCursorImageToScreenImage(System.Drawing.Graphics@)">
            <summary>  
            将鼠标指针形状绘制到屏幕截图上  
            </summary>  
            <param name="g"></param>  
        </member>
        <member name="M:Y.Utils.IOUtils.DriveUtils.DriveTool.GetLastFormatTime(System.String)">
            <summary>
            获取磁盘上次格式化时间
            </summary>
            <param name="dstr"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.IOUtils.FileManUtils.FileWatcher">
            <summary>
            文件更改通知
            </summary>
        </member>
        <member name="T:Y.Utils.IOUtils.FileManUtils.FileWatcher.FileWatcherEventHandler">
            <summary>
            接受文件监控信息的事件委托
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="F:Y.Utils.IOUtils.FileManUtils.FileWatcher.EventHandler">
            <summary>
            获取文件监控信息
            </summary>
        </member>
        <member name="P:Y.Utils.IOUtils.FileManUtils.FileWatcher.IsWatching">
            <summary>
            文件更改监控已启动
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileManUtils.FileWatcher.#ctor(System.String[])">
            <summary>
            创建文件监控类
            </summary>
            <param name="paths"></param>
        </member>
        <member name="M:Y.Utils.IOUtils.FileManUtils.FileWatcher.Start">
            <summary>
            启动文件监测
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileManUtils.FileWatcher.Stop">
            <summary>
            停止文件监测
            </summary>
        </member>
        <member name="T:Y.Utils.IOUtils.FileUtils.FileCompressTool">
            <summary>
            文件压缩
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCompressTool.Compress(System.String)">
            <summary>
            压缩
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCompressTool.Decompress(System.String)">
            <summary>
            解压缩
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCompressTool.CompressSingle(System.String)">
            <summary>
            单文件压缩（生成的压缩包和第三方的解压软件兼容）
            </summary>
            <param name="sourceFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCompressTool.CompressMulti(System.String[],System.String)">
            <summary>
            自定义多文件压缩（生成的压缩包和第三方的压缩文件解压不兼容）
            </summary>
            <param name="sourceFileList">文件列表</param>
            <param name="saveFullPath">压缩包全路径</param>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCompressTool.DeCompressMulti(System.String,System.String)">
            <summary>
            多文件压缩解压
            </summary>
            <param name="zipPath">压缩文件路径</param>
            <param name="targetPath">解压目录</param>
        </member>
        <member name="T:Y.Utils.IOUtils.FileUtils.FilePackageTool">
            <summary>
            文件打包工具
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FilePackageTool.Pack(System.String,System.String,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object,System.Boolean)">
            <summary>
            文件打包
            </summary>
            <param name="srcPath">要打包的路径</param>
            <param name="dstFile">打包后的文件</param>
            <param name="progress">回调进度</param>
            <param name="overwrite">覆盖打包后的文件（重复时）</param>
            <returns>
            -11;//要打包的路径不存在
            -12;//打包后的目标文件已存在
            -13;//要打包的路径中没有文件
            -14;//输出文件夹不存在
            -404;//未知错误，操作失败
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FilePackageTool.Unpack(System.String,System.String,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object,System.Boolean)">
            <summary>
            拆包
            </summary>
            <param name="srcFile">包文件路径</param>
            <param name="dstPath">拆包到的目录 </param>
            <param name="progress">回调进度</param>
            <param name="overwrite">覆盖拆包后的文件（重复时）</param>
            <returns>
            -11; //要解包的文件不存在
            -12;//要解包的目标文件夹已存在
            -20;// 文件类型不匹配
            -99;//未知错误，操作失败
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FilePackageTool.GetFileVersion(System.IO.FileStream)">
            <summary>
            获取文件类型的类型版本
            </summary>
            <param name="fs"></param>
            <returns>
            如果文件类型不匹配，则返回null
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FilePackageTool.GetFilePackageModel(System.Byte[])">
            <summary>
            解析打包文件文件列表
            </summary>
            <param name="headdata"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FilePackageTool.CreateFilePackageModel(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建打包文件列表信息
            </summary>
            <param name="files"></param>
            <param name="srcPath"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.IOUtils.FileUtils.FileEncryptTool">
            <summary>
            文件加密工具
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileEncryptTool.Encrypt(System.String,System.String,System.String,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object,System.Boolean)">
            <summary>
            文件加密
            </summary>
            <param name="srcFile">源文件</param>
            <param name="dstFile">目标文件</param>
            <param name="password">加密密码</param>
            <param name="progress">回调进度</param>
            <param name="overwrite">是否覆盖已有目标文件</param>
            <returns>
            >0：操作成功（操作共计秒数）
            -11：要加密的文件不存在
            -12：加密后的目标文件已存在
            -404：未知错误，操作失败
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileEncryptTool.Decrypt(System.String,System.String,System.String,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object,System.Boolean)">
            <summary>
            文件解密
            </summary>
            <param name="srcFile">源文件</param>
            <param name="dstFile">目标文件</param>
            <param name="password">解密密码</param>
            <param name="progress">回调进度</param>
            <param name="overwrite">是否覆盖已有目标文件</param>
            <returns>
            >0：操作成功（操作共计秒数）
            -11：要解密的文件不存在
            -12：解密后的目标文件已存在
            -20：文件类型不匹配
            -30：文件头不长度不吻合
            -90：解锁密码错误
            -404：未知错误，操作失败
            </returns>
        </member>
        <member name="T:Y.Utils.IOUtils.FileUtils.FileCodeTool">
            <summary>
            获取文件特征码（MD5，SHA1）
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCodeTool.GetMD5(System.String)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fileName">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCodeTool.GetSHA1(System.String)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fileName">要计算 sha1 值的文件名和路径</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCodeTool.HashFile(System.String,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fileName">要计算哈希值的文件名和路径</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCodeTool.HashData(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileCodeTool.ByteArrayToHexString(System.Byte[])">
            <summary>
            字节数组转换为16进制表示的字符串
            </summary>
        </member>
        <member name="T:Y.Utils.IOUtils.FileUtils.FileTool">
            <summary>
            文件操作工具
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.IsFile(System.String)">
            <summary>
            判断字符串是文件路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.GetFile(System.String,System.String)">
            <summary>
            获取文件（单层目录）
            </summary>
            <param name="path">路径</param>
            <param name="pattern">通配符</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.GetAllFile(System.String,System.String[])">
            <summary>
            获取目录下的所有文件
            防止遇到（$文件夹报错无法获取目录的错误）
            </summary>
            <param name="path"></param>
            <param name="patterns"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.GetAllFile(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            获取文件（多个目录）（向下钻取所有目录）
            </summary>
            <param name="paths">路径（支持多个路径）</param>
            <param name="patterns">通配符（支持多个通配符）</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.Delete(System.String[])">
            <summary>
            删除文件（多个）
            </summary>
            <param name="files">文件路径（支持多个文件路径）</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.Size(System.String)">
            <summary>
            获取文件的大小（字节数）
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.Size(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个文件的大小（字节数）
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.Size(System.String,System.String)">
            <summary>
            获取文件大小（根据单位换算）
            </summary>
            <param name="fileName"></param>
            <param name="unit">B，KB，MB，GB</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.SizeFormat(System.String)">
            <summary>
            获取文件大小信息（自动适配）（如：1MB，10KB...）
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.GetMD5(System.String)">
            <summary>
            获取文件的MD5特征码
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.FileUtils.FileTool.GetMD5(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个文件的MD5特征码
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.IOUtils.PathUtils.DirTool">
            <summary>
            文件目录工具类
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.Create(System.String)">
            <summary>
            创建文件目录（文件不存在则创建）
            </summary>
            <param name="path"></param>
            <returns>
            如果文件已存在，返回true
            如果文件不存在，则创建文件，成功返回true，失败返回false
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.Parent(System.String)">
            <summary>
            获取目录的父目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.GetPath(System.String)">
            <summary>
            获取目录下的目录（一层）
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.GetAllPath(System.String)">
            <summary>
            获取目录下所有目录（递归）
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.IsDriver(System.String)">
            <summary>
            判断目录是否为磁盘
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.GetFilePath(System.String)">
            <summary>
            获取文件所在的目录
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.Combine(System.String[])">
            <summary>
            连接多个string构成目录
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.PathUtils.DirTool.Include(System.String,System.String)">
            <summary>
            路径包含关系
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns>
            -1：不存在包含关系
            0：两个目录相同
            1：path1 包含 path2（path1 大）
            2：path2 包含 path1（path2 大）
            </returns>
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetPrivateProfileSectionNames(System.IntPtr,System.UInt32,System.String)">
            <summary>  
            获取所有节点名称(Section)  
            </summary>  
            <param name="lpszReturnBuffer">存放节点名称的内存地址,每个节点之间用\0分隔</param>  
            <param name="nSize">内存大小(characters)</param>  
            <param name="lpFileName">Ini文件</param>  
            <returns>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetPrivateProfileSection(System.String,System.IntPtr,System.UInt32,System.String)">
            <summary>  
            获取某个指定节点(Section)中所有KEY和Value  
            </summary>  
            <param name="lpAppName">节点名称</param>  
            <param name="lpReturnedString">返回值的内存地址,每个之间用\0分隔</param>  
            <param name="nSize">内存大小(characters)</param>  
            <param name="lpFileName">Ini文件</param>  
            <returns>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetPrivateProfileString(System.String,System.String,System.String,System.Char[],System.UInt32,System.String)">
            <summary>  
            读取INI文件中指定的Key的值  
            </summary>  
            <param name="lpAppName">节点名称。如果为null,则读取INI中所有节点名称,每个节点名称之间用\0分隔</param>  
            <param name="lpKeyName">Key名称。如果为null,则读取INI中指定节点中的所有KEY,每个KEY之间用\0分隔</param>  
            <param name="lpDefault">读取失败时的默认值</param>  
            <param name="lpReturnedString">读取的内容缓冲区，读取之后，多余的地方使用\0填充</param>  
            <param name="nSize">内容缓冲区的长度</param>  
            <param name="lpFileName">INI文件名</param>  
            <returns>实际读取到的长度</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.WritePrivateProfileSection(System.String,System.String,System.String)">
            <summary>  
            将指定的键值对写到指定的节点，如果已经存在则替换。  
            </summary>  
            <param name="lpAppName">节点，如果不存在此节点，则创建此节点</param>  
            <param name="lpString">Item键值对，多个用\0分隔,形如key1=value1\0key2=value2  
            <para>如果为string.Empty，则删除指定节点下的所有内容，保留节点</para>  
            <para>如果为null，则删除指定节点下的所有内容，并且删除该节点</para>  
            </param>  
            <param name="lpFileName">INI文件</param>  
            <returns>是否成功写入</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>  
            将指定的键和值写到指定的节点，如果已经存在则替换  
            </summary>  
            <param name="lpAppName">节点名称</param>  
            <param name="lpKeyName">键名称。如果为null，则删除指定的节点及其所有的项目</param>  
            <param name="lpString">值内容。如果为null，则删除指定节点中指定的键。</param>  
            <param name="lpFileName">INI文件</param>  
            <returns>操作是否成功</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetAllSectionNames(System.String)">
            <summary>  
            读取INI文件中指定INI文件中的所有节点名称(Section)  
            </summary>  
            <param name="iniFile">Ini文件</param>  
            <returns>所有节点,没有内容返回string[0]</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetAllItems(System.String,System.String)">
            <summary>  
            获取INI文件中指定节点(Section)中的所有条目(key=value形式)  
            </summary>  
            <param name="iniFile">Ini文件</param>  
            <param name="section">节点名称</param>  
            <returns>指定节点中的所有项目,没有内容返回string[0]</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetAllItemKeys(System.String,System.String)">
            <summary>  
            获取INI文件中指定节点(Section)中的所有条目的Key列表  
            </summary>  
            <param name="iniFile">Ini文件</param>  
            <param name="section">节点名称</param>  
            <returns>如果没有内容,反回string[0]</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetStringValue(System.String,System.String,System.String,System.String)">
            <summary>  
            读取INI文件中指定KEY的字符串型值  
            </summary>  
            <param name="iniFile">Ini文件</param>  
            <param name="section">节点名称</param>  
            <param name="key">键名称</param>  
            <param name="defaultValue">如果没此KEY所使用的默认值</param>  
            <returns>读取到的值</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.WriteItems(System.String,System.String,System.String)">
            <summary>  
            在INI文件中，将指定的键值对写到指定的节点，如果已经存在则替换  
            </summary>  
            <param name="iniFile">INI文件</param>  
            <param name="section">节点，如果不存在此节点，则创建此节点</param>  
            <param name="items">键值对，多个用\0分隔,形如key1=value1\0key2=value2</param>  
            <returns></returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.WriteValue(System.String,System.String,System.String,System.String)">
            <summary>  
            在INI文件中，指定节点写入指定的键及值。如果已经存在，则替换。如果没有则创建。  
            </summary>  
            <param name="iniFile">INI文件</param>  
            <param name="section">节点</param>  
            <param name="key">键</param>  
            <param name="value">值</param>  
            <returns>操作是否成功</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.DeleteKey(System.String,System.String,System.String)">
            <summary>  
            在INI文件中，删除指定节点中的指定的键。  
            </summary>  
            <param name="iniFile">INI文件</param>  
            <param name="section">节点</param>  
            <param name="key">键</param>  
            <returns>操作是否成功</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.DeleteSection(System.String,System.String)">
            <summary>  
            在INI文件中，删除指定的节点。  
            </summary>  
            <param name="iniFile">INI文件</param>  
            <param name="section">节点</param>  
            <returns>操作是否成功</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.EmptySection(System.String,System.String)">
            <summary>  
            在INI文件中，删除指定节点中的所有内容。  
            </summary>  
            <param name="iniFile">INI文件</param>  
            <param name="section">节点</param>  
            <returns>操作是否成功</returns>  
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.WriteValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            扩展：插入布尔类型数据
            </summary>
            <param name="iniFile"></param>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.TxtUtils.IniTool.GetBoolValue(System.String,System.String,System.String)">
            <summary>
            扩展：读取布尔类型数据
            </summary>
            <param name="iniFile"></param>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.IOUtils.LogUtils.Log">
            <summary>
            Log 输出工具
            
            说明：
            1、Log.AllocConsole();开启控制台
            2、Log.FreeConsole();关闭控制台
            3、Log.i("information");输出消息
            </summary>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.GetColor(Y.Utils.IOUtils.LogUtils.LogType)">
            <summary>
            获取输出颜色
            </summary>
            <param name="type">输出类型</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.Write(Y.Utils.IOUtils.LogUtils.LogType,System.String)">
            <summary>
            写出到控制台
            </summary>
            <param name="type">类型</param>
            <param name="tag">标记</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.v``1(``0)">
            <summary>
            输出 verbose (啰嗦信息)
            </summary>
            <param name="message">消息</param>
            <param name="tag">可选：标记</param>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.d``1(``0)">
            <summary>
            输出 Debug (调试信息)
            </summary>
            <param name="message">消息</param>
            <param name="tag">可选：标记</param>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.i``1(``0)">
            <summary>
            输出 Information (重要信息)
            </summary>
            <param name="message">消息</param>
            <param name="tag">可选：标记</param>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.w``1(``0)">
            <summary>
            输出 Warning (警告信息)
            </summary>
            <param name="message">消息</param>
            <param name="tag">可选：标记</param>
        </member>
        <member name="M:Y.Utils.IOUtils.LogUtils.Log.e``1(``0)">
            <summary>
            输出 Error (错误信息)
            </summary>
            <param name="message">消息</param>
            <param name="tag">可选：标记</param>
        </member>
        <member name="T:Y.Utils.UpdateUtils.AppUpdateInfo">
            <summary>
            程序更新信息
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Name">
            <summary>
            功能名
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Version">
            <summary>
            版本号（必须是点分四位版本号：1.1.1.1）
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Necessary">
            <summary>
            必要更新
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Desc">
            <summary>
            新版本描述（Readme）
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.DateTime">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.DownloadMode">
            <summary>
            下载方式（0：http；1：ftp）
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.FtpIp">
            <summary>
            ftp地址
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.FtpAccount">
            <summary>
            ftp账号
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.FtpPassword">
            <summary>
            ftp密码
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.FtpFile">
            <summary>
            Ftp文件
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.HttpUrl">
            <summary>
            http地址
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.Md5">
            <summary>
            文件Md5码
            </summary>
        </member>
        <member name="P:Y.Utils.UpdateUtils.AppUpdateInfo.ReleasePath">
            <summary>
            释放文件目录
            </summary>
        </member>
        <member name="T:Y.Utils.UpdateUtils.AppUpdateTool">
            <summary>
            程序更新工具
            </summary>
        </member>
        <member name="M:Y.Utils.UpdateUtils.AppUpdateTool.GetNewVersion(System.String,System.Version,Y.Utils.UpdateUtils.AppUpdateInfo@)">
            <summary>
            获取新版本
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="info"></param>
            <returns>
            -10;//请求版本失败
            -20;//没有更新的版本
            </returns>
        </member>
        <member name="M:Y.Utils.UpdateUtils.AppUpdateTool.Update(Y.Utils.UpdateUtils.AppUpdateInfo,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object)">
            <summary>
            更新
            </summary>
            <param name="info">新版本信息</param>
            <param name="tempPath">文件下载位置</param>
            <param name="dictionary">文件相对位置字典</param>
            <param name="downProgress">下载进度回调</param>
            <param name="downSender">下载进度事件数据</param>
            <param name="releaseProgress">释放进度回调</param>
            <param name="releaseSender">释放进度事件数据</param>
            <returns>
            -10000;//没有新版本
            -20000;//文件下载失败
            -30000;//文件释放失败
            </returns>
        </member>
        <member name="P:Y.Utils.NetUtils.NetManUtils.NetFlowService.NetProcessInfoList">
            <summary>
            程序联网信息列表
            </summary>
        </member>
        <member name="P:Y.Utils.NetUtils.NetManUtils.NetFlowService.NetFlow">
            <summary>
            网络流量计数器
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.Start">
            <summary>
            开启网络流量监控
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.Stop">
            <summary>
            关闭网络流量监控
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.DataMonitorEvent(Y.Utils.NetUtils.NetInfoUtils.NetFlowTool)">
            <summary>
            系统性能计数器每秒统计事件
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.NewPacketEvent(Y.Utils.NetUtils.NetInfoUtils.NetPacketTool,Y.Utils.NetUtils.NetInfoUtils.Packet)">
            <summary>
            整理数据包到所属的进程
            </summary>
            <param name="tool"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.GetConnection">
            <summary>
            获取所有网络连接并整理列表
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.SetNetProcess">
            <summary>
            清空并重置当前所有程序的连接数
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.SetNetProcessConnection(Y.Utils.NetUtils.NetInfoUtils.NetProcessTool.TcpRow)">
            <summary>
            整理TCP连接到所属的进程
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.SetNetProcessConnection(Y.Utils.NetUtils.NetInfoUtils.NetProcessTool.UdpRow)">
            <summary>
            整理UDP连接到所属的进程
            </summary>
            <param name="u"></param>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.CalcNetProcessInfo">
            <summary>
            整理计算程序网络流量
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetManUtils.NetFlowService.CheckRestart">
            <summary>
            联网断网重启计划（应对断网或重连后网卡抓包报错造成的不准确）
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetCardInfoTool.GetNetworkCardInfo">
            <summary>
            获取网卡信息
            【名称、描述、物理地址（Mac）、Ip地址、网关地址】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetCardInfoTool.GetInstanceNames">
            <summary>
            获取网卡实例名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetCardInfoTool.GetIPv4Address">
            <summary>
            获取本机IPv4的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetCardInfoTool.GetAllIPv4Address">
            <summary>
            获取本机IPv4的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetFlowTool.UploadData">
            <summary>
            上行数据流量
            </summary>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetFlowTool.UploadDataCount">
            <summary>
            上行数据总流量
            </summary>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetFlowTool.DownloadData">
            <summary>
            下行数据流量
            </summary>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetFlowTool.DownloadDataCount">
            <summary>
            下行数据总流量
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetFlowTool.Finalize">
            <summary>
            终结器
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool">
            <summary>
            A class that intercepts IP packets on a specific interface.
            </summary>
            <remarks>
            This class only works on Windows 2000 and higher.
            </remarks>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the PacketMonitor class.
            </summary>
            <param name="ip">The interface on which to listen for IP packets.</param>
            <exception cref="T:System.NotSupportedException">The operating system does not support intercepting packets.</exception>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.Finalize">
            <summary>
            Cleans up the unmanaged resources.
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.Start">
            <summary>
            Starts listening on the specified interface.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs when trying to intercept IP packets.</exception>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.Stop">
            <summary>
            Stops listening on the specified interface.
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket intercepts an IP packet.
            </summary>
            <param name="ar">The asynchronous result.</param>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.IP">
            <summary>
            The interface used to intercept IP packets.
            </summary>
            <value>An <see cref="T:System.Net.IPAddress"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.Buffer">
            <summary>
            The buffer used to store incoming IP packets.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.OnNewPacket(Y.Utils.NetUtils.NetInfoUtils.Packet)">
            <summary>
            Raises an event that indicates a new packet has arrived.
            </summary>
            <param name="p">The arrived <see cref="T:Y.Utils.NetUtils.NetInfoUtils.Packet"/>.</param>
        </member>
        <member name="E:Y.Utils.NetUtils.NetInfoUtils.NetPacketTool.NewPacket">
            <summary>
            Holds all the listeners for the NewPacket event.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.NewPacketEventHandler">
            <summary>
            Represents the method that will handle the NewPacket event.
            </summary>
            <param name="pm">The <see cref="!:PacketMonitor"/> that intercepted the <see cref="T:Y.Utils.NetUtils.NetInfoUtils.Packet"/>.</param>
            <param name="p">The newly arrived <see cref="T:Y.Utils.NetUtils.NetInfoUtils.Packet"/>.</param>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Precedence">
            <summary>
            The Network Control precedence designation is intended to be used within a network only. The actual use and control of that designation is up to each network. The Internetwork Control designation is intended for use by gateway control originators only. If the actual use of these precedence designations is of concern to a particular network, it is the responsibility of that network to control the access to, and use of, those precedence designations.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Delay">
            <summary>
            The use of the Delay, Throughput, and Reliability indications may increase the cost (in some sense) of the service. In many networks better performance for one of these parameters is coupled with worse performance on another.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Throughput">
            <summary>
            The use of the Delay, Throughput, and Reliability indications may increase the cost (in some sense) of the service. In many networks better performance for one of these parameters is coupled with worse performance on another.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Reliability">
            <summary>
            The use of the Delay, Throughput, and Reliability indications may increase the cost (in some sense) of the service. In many networks better performance for one of these parameters is coupled with worse performance on another.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Protocol">
            <summary>
            This field indicates the next level protocol used in the data portion of the internet datagram.
            </summary>
        </member>
        <member name="T:Y.Utils.NetUtils.NetInfoUtils.Packet">
            <summary>
            Represents an IP packet.
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.Packet.#ctor(System.Byte[])">
            <summary>
            Initializes a new version of the Packet class.
            </summary>
            <param name="raw">The raw bytes of the IP packet.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="raw"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="raw"/> represents an invalid IP packet.</exception>
            <remarks>The intercept time will be set to DateTime.Now.</remarks>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.Packet.#ctor(System.Byte[],System.DateTime)">
            <summary>
            Initializes a new version of the Packet class.
            </summary>
            <param name="raw">The raw bytes of the IP packet.</param>
            <param name="time">The time when the IP packet was intercepted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="raw"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="raw"/> represents an invalid IP packet.</exception>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Raw">
            <summary>
            Gets the raw bytes of the IP packet.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Time">
            <summary>
            Gets the time when the IP packet was intercepted.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Version">
            <summary>
            Gets the version of the IP protocol used.
            </summary>
            <value>A 32-bits signed integer.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.HeaderLength">
            <summary>
            Gets the length of the IP header [in bytes].
            </summary>
            <value>A 32-bits signed integer.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Precedence">
            <summary>
            Gets the precedence parameter.
            </summary>
            <value>A <see cref="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Precedence"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Delay">
            <summary>
            Gets the delay parameter.
            </summary>
            <value>A <see cref="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Delay"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Throughput">
            <summary>
            Gets the throughput parameter.
            </summary>
            <value>A <see cref="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Throughput"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Reliability">
            <summary>
            Gets the reliability parameter.
            </summary>
            <value>A <see cref="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Reliability"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.TotalLength">
            <summary>
            Gets the total length of the IP packet.
            </summary>
            <value>A 32-bits signed integer.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Identification">
            <summary>
            Gets the identification number of the IP packet.
            </summary>
            <value>A 32-bits signed integer.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.TimeToLive">
            <summary>
            Gets the time-to-live [hop count] of the IP packet.
            </summary>
            <value>A 32-bits signed integer.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Protocol">
            <summary>
            Gets the protocol of the IP packet.
            </summary>
            <value>A <see cref="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Protocol"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Checksum">
            <summary>
            Gets the checksum of the IP packet.
            </summary>
            <value>An array of two bytes.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.SourceAddress">
            <summary>
            Gets the source address of the IP packet.
            </summary>
            <value>An <see cref="T:System.Net.IPAddress"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.DestinationAddress">
            <summary>
            Gets the destination address of the IP packet.
            </summary>
            <value>An <see cref="T:System.Net.IPAddress"/> instance.</value>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.SourcePort">
            <summary>
            Gets the source port of the packet.
            </summary>
            <value>A 32-bits signed integer.</value>
            <remarks>
            This property will only return meaningful data if the IP packet encapsulates either a TCP or a UDP packet.
            If the IP address encapsulates a packet of another protocol, the returned source port will be set to minus one.
            </remarks>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.DestinationPort">
            <summary>
            Gets the destination port of the packet.
            </summary>
            <value>A 32-bits signed integer.</value>
            <remarks>
            This property will only return meaningful data if the IP packet encapsulates either a TCP or a UDP packet.
            If the IP address encapsulates a packet of another protocol, the returned destination port will be set to minus one.
            </remarks>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Source">
            <summary>
            Gets a string representation of the source.
            </summary>
            <value>An <see cref="T:System.String"/> instance.</value>
            <remarks>
            If the encapsulated packet is a TCP or UDP packet, the returned string will consist of the IP address and the port number.
            If the IP packet does not encapsulate a TCP or UDP packet, the returned string will consist of the IP address.
            </remarks>
        </member>
        <member name="P:Y.Utils.NetUtils.NetInfoUtils.Packet.Destination">
            <summary>
            Gets a string representation of the destination.
            </summary>
            <value>An <see cref="T:System.String"/> instance.</value>
            <remarks>
            If the encapsulated packet is a TCP or UDP packet, the returned string will consist of the IP address and the port number.
            If the IP packet does not encapsulate a TCP or UDP packet, the returned string will consist of the IP address.
            </remarks>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.Packet.ToString">
            <summary>
            Returns a string representation of the Packet 
            </summary>
            <returns>An instance of the <see cref="T:System.String"/> class.</returns>
        </member>
        <member name="M:Y.Utils.NetUtils.NetInfoUtils.Packet.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the Packet 
            </summary>
            <param name="raw"><b>true</b> if the returned string should ony contain the raw bytes, <b>false</b> if the returned string should also contain a hexadecimal representation.</param>
            <returns>An instance of the <see cref="T:System.String"/> class.</returns>
        </member>
        <member name="M:Y.Utils.NetUtils.HttpUtils.HttpTool.Get``1(System.String,``0@,System.String)">
            <summary>
            Http Get（返回值：>=0正常，-100编码异常，-200创建web请求异常，-300网络异常，-400返回内容为空）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="what"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.NetUtils.HttpUtils.HttpTool.Download(System.String,System.String,Y.Utils.DelegateUtils.ProgressDelegate.ProgressHandler,System.Object)">
            <summary>
            http下载文件
            </summary>
            <param name="url">下载文件地址</param>
            <param name="file">文件存放地址，包含文件名</param>
            <param name="progress">回调进度</param>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.NetUtils.FTPUtils.FtpTool">
            <summary>
            FTP 帮助类
            </summary>
        </member>
        <member name="M:Y.Utils.NetUtils.EmailUtils.EmailHelper.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="fromMail">发件人地址</param>
            <param name="toMail">收件人地址（多个电子邮件地址之间必须用逗号字符（“,”）分隔）</param>
            <param name="subject">邮件标题</param>
            <param name="emailBody">邮件内容（可以以html格式进行设计）</param>
            <param name="username">发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）</param>
            <param name="password">发件人邮箱密码</param>
            <param name="attachments">邮件附件</param>
            <param name="sslEnable">对邮件内容进行socket层加密传输，false表示不加密</param>
            <param name="pwdCheckEnable">对发件人邮箱进行密码验证，false表示不对发件人邮箱进行密码验证</param>
            <param name="port">发送邮件所用的端口号（htmp协议默认为25）</param>
        </member>
        <member name="M:Y.Utils.NetUtils.EmailUtils.EmailHelper.SendEmail(System.String,System.String,System.String)">
            <summary>
            发送邮件 [hiwaka@163.com]
            </summary>
            <param name="title">邮件标题</param>
            <param name="report">邮件内容（html格式）</param>
            <param name="address">目标地址</param>
            <returns></returns>
        </member>
        <member name="F:Y.Utils.ReflectionUtils.AttributeUtils.AttributeTool.Cache">
            <summary>  
            Cache Data  
            </summary>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.AttributeTool.GetCustomAttributeValue``1(System.Type,System.Func{``0,System.String})">
            <summary>  
            获取CustomAttribute Value  
            </summary>  
            <typeparam name="T">Attribute的子类型</typeparam>  
            <param name="sourceType">头部标有CustomAttribute类的类型</param>  
            <param name="attributeValueAction">取Attribute具体哪个属性值的匿名函数</param>  
            <returns>返回Attribute的值，没有则返回null</returns>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.AttributeTool.GetCustomAttributeValue``1(System.Type,System.Func{``0,System.String},System.String)">
            <summary>  
            获取CustomAttribute Value  
            </summary>  
            <typeparam name="T">Attribute的子类型</typeparam>  
            <param name="sourceType">头部标有CustomAttribute类的类型</param>  
            <param name="attributeValueAction">取Attribute具体哪个属性值的匿名函数</param>  
            <param name="name">field name或property name</param>  
            <returns>返回Attribute的值，没有则返回null</returns>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.AttributeTool.CacheAttributeValue``1(System.Type,System.Func{``0,System.String},System.String)">
            <summary>  
            缓存Attribute Value  
            </summary>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.AttributeTool.BuildKey(System.Type,System.String)">
            <summary>  
            缓存Collection Name Key  
            </summary>  
        </member>
        <member name="F:Y.Utils.ReflectionUtils.AttributeUtils.CustomAttributeHelper.Cache">
            <summary>  
            Cache Data  
            </summary>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.CustomAttributeHelper.GetCustomAttributeValue``1(System.Type,System.Func{``0,System.String})">
            <summary>  
            获取CustomAttribute Value  
            </summary>  
            <typeparam name="T">Attribute的子类型</typeparam>  
            <param name="sourceType">头部标有CustomAttribute类的类型</param>  
            <param name="attributeValueAction">取Attribute具体哪个属性值的匿名函数</param>  
            <returns>返回Attribute的值，没有则返回null</returns>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.CustomAttributeHelper.GetCustomAttributeValue``1(System.Type,System.Func{``0,System.String},System.String)">
            <summary>  
            获取CustomAttribute Value  
            </summary>  
            <typeparam name="T">Attribute的子类型</typeparam>  
            <param name="sourceType">头部标有CustomAttribute类的类型</param>  
            <param name="attributeValueAction">取Attribute具体哪个属性值的匿名函数</param>  
            <param name="name">field name或property name</param>  
            <returns>返回Attribute的值，没有则返回null</returns>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.CustomAttributeHelper.CacheAttributeValue``1(System.Type,System.Func{``0,System.String},System.String)">
            <summary>  
            缓存Attribute Value  
            </summary>  
        </member>
        <member name="M:Y.Utils.ReflectionUtils.AttributeUtils.CustomAttributeHelper.BuildKey(System.Type,System.String)">
            <summary>  
            缓存Collection Name Key  
            </summary>  
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.Name">
            <summary>
            软件名称
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.Version">
            <summary>
            软件版本
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.Publisher">
            <summary>
            开发商
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.HelpLink">
            <summary>
            帮助链接
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.URLInfoAbout">
            <summary>
            介绍链接
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.EstimatedSize">
            <summary>
            空间占用
            </summary>
        </member>
        <member name="P:Y.Utils.SoftwareUtils.SoftwareInfo.InstallDate">
            <summary>
            安装日期
            </summary>
        </member>
        <member name="M:Y.Utils.SoftwareUtils.SoftwareTool.ExistControl(System.String)">
            <summary>
            存在控制面板
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.SoftwareUtils.SoftwareTool.ExistProcess(System.String)">
            <summary>
            存在进程
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.SoftwareUtils.SoftwareTool.ExistFile(System.String)">
            <summary>
            存在文件
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.SoftwareUtils.SoftwareTool.ExistRegist(System.String,System.String)">
            <summary>
            存在注册表项
            </summary>
            <param name="item"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Y.Utils.TaskServiceUtils.TaskServiceDaddy.IsRun">
            <summary>
            通过运行时间判断是否运行
            </summary>
        </member>
        <member name="P:Y.Utils.TaskServiceUtils.TaskServiceDaddy.IsStart">
            <summary>
            已启动
            </summary>
        </member>
        <member name="F:Y.Utils.TaskServiceUtils.TaskServiceDaddy._IsStart">
            <summary>
            已启动（Protect）
            </summary>
        </member>
        <member name="F:Y.Utils.TaskServiceUtils.TaskServiceDaddy.CT">
            <summary>
            取消标志
            </summary>
        </member>
        <member name="F:Y.Utils.TaskServiceUtils.TaskServiceDaddy.Interval">
            <summary>
            任务循环间隔
            </summary>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.SetInterval(System.Int32)">
            <summary>
            设置任务间隔（0为不循环任务）
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.Start">
            <summary>
            启动服务任务
            </summary>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.BeforeTODO">
            <summary>
            提前干点啥
            </summary>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.TODO">
            <summary>
            干点啥
            </summary>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.AfterTODO">
            <summary>
            完事儿干点啥
            </summary>
        </member>
        <member name="M:Y.Utils.TaskServiceUtils.TaskServiceDaddy.Stop">
            <summary>
            停止服务任务
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_HOR_POSITIVE">
            <summary>
            从左到右显示
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_HOR_NEGATIVE">
            <summary>
            从右到左显示
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_VER_POSITIVE">
            <summary>
            从上到下显示
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_VER_NEGATIVE">
            <summary>
            从下到上显示
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_CENTER">
            <summary>
            若使用了AW_HIDE标志，则使窗口向内重叠，即收缩窗口；否则使窗口向外扩展，即展开窗口
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_HIDE">
            <summary>
            隐藏窗口，缺省则显示窗口
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_ACTIVATE">
            <summary>
            激活窗口。在使用了AW_HIDE标志后不能使用这个标志
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_SLIDE">
            <summary>
            使用滑动类型。缺省则为滚动动画类型。当使用AW_CENTER标志时，这个标志就被忽略
            </summary>
        </member>
        <member name="F:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AW_BLEND">
            <summary>
            透明度从高到低
            </summary>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.FormStyleAPI.AnimateWindow(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            执行动画
            </summary>
            <param name="whnd">控件句柄</param>
            <param name="dwtime">动画时间</param>
            <param name="dwflag">动画组合名称</param>
            <returns>bool值，动画是否成功</returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.PermissionAPI.AllocateAndInitializeSid(System.Byte[],System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            The AllocateAndInitializeSid function allocates and initializes a security identifier (SID) with up to eight subauthorities.
            </summary>
            <param name="pIdentifierAuthority">Pointer to a SID_IDENTIFIER_AUTHORITY structure, giving the top-level identifier authority value to set in the SID.</param>
            <param name="nSubAuthorityCount">Specifies the number of subauthorities to place in the SID. This parameter also identifies how many of the subauthority parameters have meaningful values. This parameter must contain a value from 1 to 8.</param>
            <param name="dwSubAuthority0">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority1">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority2">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority3">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority4">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority5">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority6">Subauthority value to place in the SID.</param>
            <param name="dwSubAuthority7">Subauthority value to place in the SID.</param>
            <param name="pSid">Pointer to a variable that receives the pointer to the allocated and initialized SID structure.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.PermissionAPI.CheckTokenMembership(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            The CheckTokenMembership function determines whether a specified SID is enabled in an access token.
            </summary>
            <param name="TokenHandle">Handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token.</param>
            <param name="SidToCheck">Pointer to a SID structure. The CheckTokenMembership function checks for the presence of this SID in the user and group SIDs of the access token.</param>
            <param name="IsMember">Pointer to a variable that receives the results of the check. If the SID is present and has the SE_GROUP_ENABLED attribute, IsMember returns TRUE; otherwise, it returns FALSE.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.PermissionAPI.FreeSid(System.IntPtr)">
            <summary>
            The FreeSid function frees a security identifier (SID) previously allocated by using the AllocateAndInitializeSid function.
            </summary>
            <param name="pSid">Pointer to the SID structure to free.</param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetLastInputTime">
            <summary>
            获取计算机无操作时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetForegroundWindow">
            <summary>
            获取当前窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            显示窗口
            </summary>
            <param name="hwnd"></param>
            <param name="nCmdShow">0关闭 1正常显示 2最小化 3最大化</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetWindowRect(System.IntPtr,Y.Utils.WindowsUtils.APIUtils.WindowsAPI.RECT@)">
            <summary>
            获取窗口大小
            </summary>
            <param name="hWnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            获取窗口所在进程ID
            </summary>
            <param name="hwnd"></param>
            <param name="pid"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗体标题
            </summary>
            <param name="hWnd"></param>
            <param name="lpString"></param>
            <param name="nMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetNowWindowName">
            <summary>
            当前窗口标题
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.APIUtils.WindowsAPI.GetNowProcessName">
            <summary>
            当前窗口进程名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.WindowsUtils.FormUtils.FormManTool">
            <summary>
            窗体管理器
            </summary>
        </member>
        <member name="M:Y.Utils.WindowsUtils.FormUtils.FormManTool.GetUnique``1">
            <summary>
            获取唯一窗体对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.FormUtils.FormManTool.SetAllBackColor(System.Drawing.Color)">
            <summary>
            设置所有窗体的背景色
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ClipboardTool.SetText(System.String)">
            <summary>
            设置剪贴板的文本内容
            </summary>
            <param name="s">文本内容</param>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ClipboardTool.GetText">
            <summary>
            获取剪贴板中的文本内容
            </summary>
            <returns>返回剪贴板文本</returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ClipboardTool.GetBitmap">
            <summary>
            获取剪贴板位图格式数据
            </summary>
            <returns>位图</returns>
        </member>
        <member name="T:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool">
            <summary>
            计算机信息
            </summary>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.CpuInfo">
            <summary>
            CPU 信息
            【序列号、型号】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.NetworkCardInfo">
            <summary>
            网卡信息
            【名称、描述、物理地址（Mac）、Ip地址、网关地址】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.GraphicsCardInfo">
            <summary>
            显卡型号
            【型号、RAM】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.SoundCardModel">
            <summary>
            声卡型号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.TotalPhysicalMemory">
            <summary>
            物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.AvailablePhysicalMemory">
            <summary>
            可用物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.HardDiskInfo">
            <summary>
            硬盘信息
            【序列号、型号】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.MachineName">
            <summary>
            计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.BoardInfo">
            <summary>
            主板信息
            【制造商、型号、序列号】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.OsInfo">
            <summary>
            操作系统信息
            【系统名称、系统路劲、安装时间】
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.SystemType">
            <summary>
            系统类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.UserName">
            <summary>
            当前用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.UserName2">
            <summary>
            当前用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.UserNames">
            <summary>
            所有用户名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.UserDomainName">
            <summary>
            域名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.TickCount">
            <summary>
            系统启动后的毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.ProcessorCount">
            <summary>
            处理器数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.OSVersion">
            <summary>
            平台标识和版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.ComputerInfoTool.Is64BitOperatingSystem">
            <summary>
            64位操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="T:Y.Utils.WindowsUtils.InfoUtils.RegisterTool">
            <summary>
            注册表操作工具
            </summary>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.SetValue(System.String,System.String,System.String)">
            <summary>
            添加注册表值
            </summary>
            <param name="key"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.GetValue(System.String,System.String)">
            <summary>
            读取注册表值
            </summary>
            <param name="key"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.DeleteValue(System.String,System.String)">
            <summary>
            删除注册表值
            </summary>
            <param name="key"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.ExtractInfo(System.String,System.String@,System.String@)">
            <summary>
            分离注册表根目录和子目录
            </summary>
            <param name="key"></param>
            <param name="reg"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.Open(System.String,System.Boolean)">
            <summary>
            打开注册表相应目录
            </summary>
            <param name="key">目标子项</param>
            <param name="writable">是否具有写权限</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.InfoUtils.RegisterTool.Create(System.String)">
            <summary>
            创建或打开注册表相应目录
            </summary>
            <param name="key">目标子项</param>
            <returns></returns>
        </member>
        <member name="M:Y.Utils.WindowsUtils.HookUtils.UserActivityHook.#ctor(System.Reflection.Module)">
            <summary>
            Default constructor - starts hooks automatically
            </summary>
        </member>
        <member name="M:Y.Utils.YUtils.YUtilsAuth.Check">
            <summary>
            工具类验证
            </summary>
        </member>
        <member name="M:Y.Utils.YUtils.YUtilsAuth.CheckObsolete">
            <summary>
            验证有效期
            </summary>
        </member>
    </members>
</doc>
